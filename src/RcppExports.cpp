// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bijectionvector
arma::vec bijectionvector(unsigned int K);
RcppExport SEXP _hmcdm_bijectionvector(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(bijectionvector(K));
    return rcpp_result_gen;
END_RCPP
}
// inv_bijectionvector
arma::vec inv_bijectionvector(unsigned int K, double CL);
RcppExport SEXP _hmcdm_inv_bijectionvector(SEXP KSEXP, SEXP CLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type CL(CLSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_bijectionvector(K, CL));
    return rcpp_result_gen;
END_RCPP
}
// rwishart
arma::mat rwishart(unsigned int df, const arma::mat& S);
RcppExport SEXP _hmcdm_rwishart(SEXP dfSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rwishart(df, S));
    return rcpp_result_gen;
END_RCPP
}
// rinvwish
arma::mat rinvwish(unsigned int df, const arma::mat& Sig);
RcppExport SEXP _hmcdm_rinvwish(SEXP dfSEXP, SEXP SigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sig(SigSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwish(df, Sig));
    return rcpp_result_gen;
END_RCPP
}
// rmultinomial
double rmultinomial(const arma::vec& ps);
RcppExport SEXP _hmcdm_rmultinomial(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinomial(ps));
    return rcpp_result_gen;
END_RCPP
}
// rDirichlet
arma::vec rDirichlet(const arma::vec& deltas);
RcppExport SEXP _hmcdm_rDirichlet(SEXP deltasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type deltas(deltasSEXP);
    rcpp_result_gen = Rcpp::wrap(rDirichlet(deltas));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm
double dmvnrm(arma::vec x, arma::vec mean, arma::mat sigma, bool logd);
RcppExport SEXP _hmcdm_dmvnrm(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// rmvnrm
arma::vec rmvnrm(arma::vec mu, arma::mat sigma);
RcppExport SEXP _hmcdm_rmvnrm(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnrm(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// random_Q
arma::mat random_Q(unsigned int J, unsigned int K);
RcppExport SEXP _hmcdm_random_Q(SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(random_Q(J, K));
    return rcpp_result_gen;
END_RCPP
}
// ETAmat
arma::mat ETAmat(unsigned int K, unsigned int J, const arma::mat& Q);
RcppExport SEXP _hmcdm_ETAmat(SEXP KSEXP, SEXP JSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(ETAmat(K, J, Q));
    return rcpp_result_gen;
END_RCPP
}
// TPmat
arma::mat TPmat(unsigned int K);
RcppExport SEXP _hmcdm_TPmat(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(TPmat(K));
    return rcpp_result_gen;
END_RCPP
}
// crosstab
arma::mat crosstab(const arma::vec& V1, const arma::vec& V2, const arma::mat& TP, unsigned int nClass, unsigned int col_dim);
RcppExport SEXP _hmcdm_crosstab(SEXP V1SEXP, SEXP V2SEXP, SEXP TPSEXP, SEXP nClassSEXP, SEXP col_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type V1(V1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type V2(V2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type col_dim(col_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(crosstab(V1, V2, TP, nClass, col_dim));
    return rcpp_result_gen;
END_RCPP
}
// resp_miss
arma::cube resp_miss(const arma::cube& Responses, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_resp_miss(SEXP ResponsesSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Responses(ResponsesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(resp_miss(Responses, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// OddsRatio
arma::mat OddsRatio(unsigned int N, unsigned int J, const arma::mat& Yt);
RcppExport SEXP _hmcdm_OddsRatio(SEXP NSEXP, SEXP JSEXP, SEXP YtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Yt(YtSEXP);
    rcpp_result_gen = Rcpp::wrap(OddsRatio(N, J, Yt));
    return rcpp_result_gen;
END_RCPP
}
// getMode
int getMode(arma::vec sorted_vec, int size);
RcppExport SEXP _hmcdm_getMode(SEXP sorted_vecSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type sorted_vec(sorted_vecSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(getMode(sorted_vec, size));
    return rcpp_result_gen;
END_RCPP
}
// Sparse2Dense
arma::cube Sparse2Dense(const arma::cube Y_real_array, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_Sparse2Dense(SEXP Y_real_arraySEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Y_real_array(Y_real_arraySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Sparse2Dense(Y_real_array, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// Dense2Sparse
arma::cube Dense2Sparse(const arma::cube Y_sim, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_Dense2Sparse(SEXP Y_simSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Y_sim(Y_simSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Dense2Sparse(Y_sim, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// Mat2Array
arma::cube Mat2Array(const arma::mat Q_matrix, unsigned int T);
RcppExport SEXP _hmcdm_Mat2Array(SEXP Q_matrixSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(Mat2Array(Q_matrix, T));
    return rcpp_result_gen;
END_RCPP
}
// Array2Mat
arma::mat Array2Mat(const arma::cube r_stars);
RcppExport SEXP _hmcdm_Array2Mat(SEXP r_starsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type r_stars(r_starsSEXP);
    rcpp_result_gen = Rcpp::wrap(Array2Mat(r_stars));
    return rcpp_result_gen;
END_RCPP
}
// Q_list
Rcpp::List Q_list(const arma::mat Q_matrix, const arma::mat Test_order, const arma::vec Test_versions);
RcppExport SEXP _hmcdm_Q_list(SEXP Q_matrixSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(Q_list(Q_matrix, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// point_estimates_learning
Rcpp::List point_estimates_learning(const Rcpp::List output, const std::string model, const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, bool alpha_EAP);
RcppExport SEXP _hmcdm_point_estimates_learning(SEXP outputSEXP, SEXP modelSEXP, SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alpha_EAPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< bool >::type alpha_EAP(alpha_EAPSEXP);
    rcpp_result_gen = Rcpp::wrap(point_estimates_learning(output, model, N, Jt, K, T, alpha_EAP));
    return rcpp_result_gen;
END_RCPP
}
// Learning_fit
Rcpp::List Learning_fit(const Rcpp::List output, const std::string model, const arma::cube Y_real_array, const arma::mat Q_matrix, const arma::mat Test_order, const arma::vec Test_versions, const Rcpp::Nullable<Rcpp::List> Q_examinee, const Rcpp::Nullable<arma::cube> Latency_array, const int G_version, const Rcpp::Nullable<Rcpp::NumericMatrix> R);
RcppExport SEXP _hmcdm_Learning_fit(SEXP outputSEXP, SEXP modelSEXP, SEXP Y_real_arraySEXP, SEXP Q_matrixSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP Q_examineeSEXP, SEXP Latency_arraySEXP, SEXP G_versionSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type output(outputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Y_real_array(Y_real_arraySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::List> >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::cube> >::type Latency_array(Latency_arraySEXP);
    Rcpp::traits::input_parameter< const int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(Learning_fit(output, model, Y_real_array, Q_matrix, Test_order, Test_versions, Q_examinee, Latency_array, G_version, R));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_HO
Rcpp::List parm_update_HO(const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, arma::cube& alphas, arma::vec& pi, arma::vec& lambdas, arma::vec& thetas, const arma::cube response, arma::cube& itempars, const arma::cube Qs, const Rcpp::List Q_examinee, const arma::mat Test_order, const arma::vec Test_versions, const double theta_propose, const arma::vec deltas_propose);
RcppExport SEXP _hmcdm_parm_update_HO(SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP lambdasSEXP, SEXP thetasSEXP, SEXP responseSEXP, SEXP itemparsSEXP, SEXP QsSEXP, SEXP Q_examineeSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP theta_proposeSEXP, SEXP deltas_proposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type itempars(itemparsSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_propose(theta_proposeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    rcpp_result_gen = Rcpp::wrap(parm_update_HO(N, Jt, K, T, alphas, pi, lambdas, thetas, response, itempars, Qs, Q_examinee, Test_order, Test_versions, theta_propose, deltas_propose));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DINA_HO
Rcpp::List Gibbs_DINA_HO(const arma::cube& Response, const arma::cube& Qs, const arma::mat& Test_order, const arma::vec& Test_versions, const double theta_propose, const arma::vec deltas_propose, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_DINA_HO(SEXP ResponseSEXP, SEXP QsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP theta_proposeSEXP, SEXP deltas_proposeSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_propose(theta_proposeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DINA_HO(Response, Qs, Test_order, Test_versions, theta_propose, deltas_propose, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_HO_RT_sep
Rcpp::List parm_update_HO_RT_sep(const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, arma::cube& alphas, arma::vec& pi, arma::vec& lambdas, arma::vec& thetas, const arma::cube latency, arma::cube& RT_itempars, arma::vec& taus, arma::vec& phi_vec, arma::vec& tauvar, const arma::cube response, arma::cube& itempars, const arma::cube Qs, const Rcpp::List Q_examinee, const arma::mat Test_order, const arma::vec Test_versions, const int G_version, const double theta_propose, const double a_sigma_tau0, const double rate_sigma_tau0, const arma::vec deltas_propose, const double a_alpha0, const double rate_alpha0);
RcppExport SEXP _hmcdm_parm_update_HO_RT_sep(SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP lambdasSEXP, SEXP thetasSEXP, SEXP latencySEXP, SEXP RT_itemparsSEXP, SEXP tausSEXP, SEXP phi_vecSEXP, SEXP tauvarSEXP, SEXP responseSEXP, SEXP itemparsSEXP, SEXP QsSEXP, SEXP Q_examineeSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP G_versionSEXP, SEXP theta_proposeSEXP, SEXP a_sigma_tau0SEXP, SEXP rate_sigma_tau0SEXP, SEXP deltas_proposeSEXP, SEXP a_alpha0SEXP, SEXP rate_alpha0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type latency(latencySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type RT_itempars(RT_itemparsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi_vec(phi_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type tauvar(tauvarSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type itempars(itemparsSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_propose(theta_proposeSEXP);
    Rcpp::traits::input_parameter< const double >::type a_sigma_tau0(a_sigma_tau0SEXP);
    Rcpp::traits::input_parameter< const double >::type rate_sigma_tau0(rate_sigma_tau0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const double >::type a_alpha0(a_alpha0SEXP);
    Rcpp::traits::input_parameter< const double >::type rate_alpha0(rate_alpha0SEXP);
    rcpp_result_gen = Rcpp::wrap(parm_update_HO_RT_sep(N, Jt, K, T, alphas, pi, lambdas, thetas, latency, RT_itempars, taus, phi_vec, tauvar, response, itempars, Qs, Q_examinee, Test_order, Test_versions, G_version, theta_propose, a_sigma_tau0, rate_sigma_tau0, deltas_propose, a_alpha0, rate_alpha0));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DINA_HO_RT_sep
Rcpp::List Gibbs_DINA_HO_RT_sep(const arma::cube& Response, const arma::cube& Latency, const arma::cube& Qs, const arma::mat& Test_order, const arma::vec& Test_versions, int G_version, const double theta_propose, const arma::vec deltas_propose, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_DINA_HO_RT_sep(SEXP ResponseSEXP, SEXP LatencySEXP, SEXP QsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP G_versionSEXP, SEXP theta_proposeSEXP, SEXP deltas_proposeSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Latency(LatencySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_propose(theta_proposeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DINA_HO_RT_sep(Response, Latency, Qs, Test_order, Test_versions, G_version, theta_propose, deltas_propose, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_HO_RT_joint
Rcpp::List parm_update_HO_RT_joint(const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, arma::cube& alphas, arma::vec& pi, arma::vec& lambdas, arma::vec& thetas, const arma::cube latency, arma::cube& RT_itempars, arma::vec& taus, arma::vec& phi_vec, arma::mat& Sig, const arma::cube response, arma::cube& itempars, const arma::cube Qs, const Rcpp::List Q_examinee, const arma::mat Test_order, const arma::vec Test_versions, const int G_version, const double sig_theta_propose, const arma::mat S, double p, const arma::vec deltas_propose, const double a_alpha0, const double rate_alpha0);
RcppExport SEXP _hmcdm_parm_update_HO_RT_joint(SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP lambdasSEXP, SEXP thetasSEXP, SEXP latencySEXP, SEXP RT_itemparsSEXP, SEXP tausSEXP, SEXP phi_vecSEXP, SEXP SigSEXP, SEXP responseSEXP, SEXP itemparsSEXP, SEXP QsSEXP, SEXP Q_examineeSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP G_versionSEXP, SEXP sig_theta_proposeSEXP, SEXP SSEXP, SEXP pSEXP, SEXP deltas_proposeSEXP, SEXP a_alpha0SEXP, SEXP rate_alpha0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type latency(latencySEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type RT_itempars(RT_itemparsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phi_vec(phi_vecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type response(responseSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type itempars(itemparsSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const double >::type sig_theta_propose(sig_theta_proposeSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const double >::type a_alpha0(a_alpha0SEXP);
    Rcpp::traits::input_parameter< const double >::type rate_alpha0(rate_alpha0SEXP);
    rcpp_result_gen = Rcpp::wrap(parm_update_HO_RT_joint(N, Jt, K, T, alphas, pi, lambdas, thetas, latency, RT_itempars, taus, phi_vec, Sig, response, itempars, Qs, Q_examinee, Test_order, Test_versions, G_version, sig_theta_propose, S, p, deltas_propose, a_alpha0, rate_alpha0));
    return rcpp_result_gen;
END_RCPP
}
// Gibbs_DINA_HO_RT_joint
Rcpp::List Gibbs_DINA_HO_RT_joint(const arma::cube& Response, const arma::cube& Latency, const arma::cube& Qs, const arma::mat& Test_order, const arma::vec& Test_versions, int G_version, const double sig_theta_propose, const arma::vec deltas_propose, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_DINA_HO_RT_joint(SEXP ResponseSEXP, SEXP LatencySEXP, SEXP QsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP G_versionSEXP, SEXP sig_theta_proposeSEXP, SEXP deltas_proposeSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Latency(LatencySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const double >::type sig_theta_propose(sig_theta_proposeSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DINA_HO_RT_joint(Response, Latency, Qs, Test_order, Test_versions, G_version, sig_theta_propose, deltas_propose, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_rRUM
void parm_update_rRUM(const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, arma::cube& alphas, arma::vec& pi, arma::vec& taus, const arma::mat& R, arma::cube& r_stars, arma::mat& pi_stars, const arma::cube Qs, const arma::cube& responses, arma::cube& X_ijk, arma::cube& Smats, arma::cube& Gmats, const arma::mat& Test_order, const arma::vec& Test_versions, const arma::vec& dirich_prior);
RcppExport SEXP _hmcdm_parm_update_rRUM(SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP tausSEXP, SEXP RSEXP, SEXP r_starsSEXP, SEXP pi_starsSEXP, SEXP QsSEXP, SEXP responsesSEXP, SEXP X_ijkSEXP, SEXP SmatsSEXP, SEXP GmatsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP dirich_priorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type r_stars(r_starsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi_stars(pi_starsSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type responses(responsesSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X_ijk(X_ijkSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Smats(SmatsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Gmats(GmatsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dirich_prior(dirich_priorSEXP);
    parm_update_rRUM(N, Jt, K, T, alphas, pi, taus, R, r_stars, pi_stars, Qs, responses, X_ijk, Smats, Gmats, Test_order, Test_versions, dirich_prior);
    return R_NilValue;
END_RCPP
}
// Gibbs_rRUM_indept
Rcpp::List Gibbs_rRUM_indept(const arma::cube& Response, const arma::cube& Qs, const arma::mat& R, const arma::mat& Test_order, const arma::vec& Test_versions, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_rRUM_indept(SEXP ResponseSEXP, SEXP QsSEXP, SEXP RSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_rRUM_indept(Response, Qs, R, Test_order, Test_versions, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_NIDA_indept
void parm_update_NIDA_indept(const unsigned int N, const unsigned int Jt, const unsigned int K, const unsigned int T, arma::cube& alphas, arma::vec& pi, arma::vec& taus, const arma::mat& R, const arma::cube Qs, const arma::cube& responses, arma::cube& X_ijk, arma::cube& Smats, arma::cube& Gmats, const arma::mat& Test_order, const arma::vec& Test_versions, const arma::vec& dirich_prior);
RcppExport SEXP _hmcdm_parm_update_NIDA_indept(SEXP NSEXP, SEXP JtSEXP, SEXP KSEXP, SEXP TSEXP, SEXP alphasSEXP, SEXP piSEXP, SEXP tausSEXP, SEXP RSEXP, SEXP QsSEXP, SEXP responsesSEXP, SEXP X_ijkSEXP, SEXP SmatsSEXP, SEXP GmatsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP dirich_priorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type responses(responsesSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type X_ijk(X_ijkSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Smats(SmatsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type Gmats(GmatsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type dirich_prior(dirich_priorSEXP);
    parm_update_NIDA_indept(N, Jt, K, T, alphas, pi, taus, R, Qs, responses, X_ijk, Smats, Gmats, Test_order, Test_versions, dirich_prior);
    return R_NilValue;
END_RCPP
}
// Gibbs_NIDA_indept
Rcpp::List Gibbs_NIDA_indept(const arma::cube& Response, const arma::cube& Qs, const arma::mat& R, const arma::mat& Test_order, const arma::vec& Test_versions, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_NIDA_indept(SEXP ResponseSEXP, SEXP QsSEXP, SEXP RSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_NIDA_indept(Response, Qs, R, Test_order, Test_versions, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// parm_update_DINA_FOHM
void parm_update_DINA_FOHM(unsigned int N, unsigned int J, unsigned int K, unsigned int nClass, unsigned int nT, const arma::cube& Y, const arma::mat& TP, const arma::mat& ETA, arma::vec& ss, arma::vec& gs, arma::mat& CLASS, arma::vec& pi, arma::mat& Omega);
RcppExport SEXP _hmcdm_parm_update_DINA_FOHM(SEXP NSEXP, SEXP JSEXP, SEXP KSEXP, SEXP nClassSEXP, SEXP nTSEXP, SEXP YSEXP, SEXP TPSEXP, SEXP ETASEXP, SEXP ssSEXP, SEXP gsSEXP, SEXP CLASSSEXP, SEXP piSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nClass(nClassSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nT(nTSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type CLASS(CLASSSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega(OmegaSEXP);
    parm_update_DINA_FOHM(N, J, K, nClass, nT, Y, TP, ETA, ss, gs, CLASS, pi, Omega);
    return R_NilValue;
END_RCPP
}
// Gibbs_DINA_FOHM
Rcpp::List Gibbs_DINA_FOHM(const arma::cube& Response, const arma::cube& Qs, const arma::mat& Test_order, const arma::vec& Test_versions, const unsigned int chain_length, const unsigned int burn_in);
RcppExport SEXP _hmcdm_Gibbs_DINA_FOHM(SEXP ResponseSEXP, SEXP QsSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Response(ResponseSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    rcpp_result_gen = Rcpp::wrap(Gibbs_DINA_FOHM(Response, Qs, Test_order, Test_versions, chain_length, burn_in));
    return rcpp_result_gen;
END_RCPP
}
// hmcdm
Rcpp::List hmcdm(const arma::cube Y_real_array, const arma::mat Q_matrix, const std::string model, const arma::mat& Test_order, const arma::vec& Test_versions, const unsigned int chain_length, const unsigned int burn_in, const int G_version, const double theta_propose, const Rcpp::Nullable<arma::cube> Latency_array, const Rcpp::Nullable<Rcpp::NumericVector> deltas_propose, const Rcpp::Nullable<Rcpp::NumericMatrix> R);
RcppExport SEXP _hmcdm_hmcdm(SEXP Y_real_arraySEXP, SEXP Q_matrixSEXP, SEXP modelSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP, SEXP chain_lengthSEXP, SEXP burn_inSEXP, SEXP G_versionSEXP, SEXP theta_proposeSEXP, SEXP Latency_arraySEXP, SEXP deltas_proposeSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type Y_real_array(Y_real_arraySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type chain_length(chain_lengthSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< const int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const double >::type theta_propose(theta_proposeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<arma::cube> >::type Latency_array(Latency_arraySEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector> >::type deltas_propose(deltas_proposeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix> >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(hmcdm(Y_real_array, Q_matrix, model, Test_order, Test_versions, chain_length, burn_in, G_version, theta_propose, Latency_array, deltas_propose, R));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_DINA
arma::vec sim_resp_DINA(unsigned int J, unsigned int K, const arma::mat& ETA, arma::vec& Svec, arma::vec& Gvec, arma::vec& alpha);
RcppExport SEXP _hmcdm_sim_resp_DINA(SEXP JSEXP, SEXP KSEXP, SEXP ETASEXP, SEXP SvecSEXP, SEXP GvecSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_DINA(J, K, ETA, Svec, Gvec, alpha));
    return rcpp_result_gen;
END_RCPP
}
// simDINA
arma::cube simDINA(const arma::cube& alphas, const arma::cube& itempars, const arma::mat& ETA, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_simDINA(SEXP alphasSEXP, SEXP itemparsSEXP, SEXP ETASEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type itempars(itemparsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(simDINA(alphas, itempars, ETA, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// pYit_DINA
double pYit_DINA(const arma::vec& ETA_it, const arma::vec& Y_it, const arma::mat& itempars);
RcppExport SEXP _hmcdm_pYit_DINA(SEXP ETA_itSEXP, SEXP Y_itSEXP, SEXP itemparsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ETA_it(ETA_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_it(Y_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type itempars(itemparsSEXP);
    rcpp_result_gen = Rcpp::wrap(pYit_DINA(ETA_it, Y_it, itempars));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_rRUM
arma::vec sim_resp_rRUM(unsigned int J, unsigned int K, const arma::mat& Q, const arma::mat& rstar, const arma::vec& pistar, const arma::vec& alpha);
RcppExport SEXP _hmcdm_sim_resp_rRUM(SEXP JSEXP, SEXP KSEXP, SEXP QSEXP, SEXP rstarSEXP, SEXP pistarSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rstar(rstarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pistar(pistarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_rRUM(J, K, Q, rstar, pistar, alpha));
    return rcpp_result_gen;
END_RCPP
}
// simrRUM
arma::cube simrRUM(const arma::cube& alphas, const arma::mat& r_stars_mat, const arma::mat& pi_stars, const arma::mat Q_matrix, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_simrRUM(SEXP alphasSEXP, SEXP r_stars_matSEXP, SEXP pi_starsSEXP, SEXP Q_matrixSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r_stars_mat(r_stars_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pi_stars(pi_starsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(simrRUM(alphas, r_stars_mat, pi_stars, Q_matrix, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// pYit_rRUM
double pYit_rRUM(const arma::vec& alpha_it, const arma::vec& Y_it, const arma::vec& pi_star_it, const arma::mat& r_star_it, const arma::mat& Q_it);
RcppExport SEXP _hmcdm_pYit_rRUM(SEXP alpha_itSEXP, SEXP Y_itSEXP, SEXP pi_star_itSEXP, SEXP r_star_itSEXP, SEXP Q_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_it(alpha_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_it(Y_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pi_star_it(pi_star_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type r_star_it(r_star_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_it(Q_itSEXP);
    rcpp_result_gen = Rcpp::wrap(pYit_rRUM(alpha_it, Y_it, pi_star_it, r_star_it, Q_it));
    return rcpp_result_gen;
END_RCPP
}
// sim_resp_NIDA
arma::vec sim_resp_NIDA(const unsigned int J, const unsigned int K, const arma::mat& Q, const arma::vec& Svec, const arma::vec& Gvec, const arma::vec& alpha);
RcppExport SEXP _hmcdm_sim_resp_NIDA(SEXP JSEXP, SEXP KSEXP, SEXP QSEXP, SEXP SvecSEXP, SEXP GvecSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_resp_NIDA(J, K, Q, Svec, Gvec, alpha));
    return rcpp_result_gen;
END_RCPP
}
// simNIDA
arma::cube simNIDA(const arma::cube& alphas, const arma::vec& Svec, const arma::vec& Gvec, const arma::mat Q_matrix, const arma::mat& Test_order, const arma::vec& Test_versions);
RcppExport SEXP _hmcdm_simNIDA(SEXP alphasSEXP, SEXP SvecSEXP, SEXP GvecSEXP, SEXP Q_matrixSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(simNIDA(alphas, Svec, Gvec, Q_matrix, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// pYit_NIDA
double pYit_NIDA(const arma::vec& alpha_it, const arma::vec& Y_it, const arma::vec& Svec, const arma::vec& Gvec, const arma::mat& Q_it);
RcppExport SEXP _hmcdm_pYit_NIDA(SEXP alpha_itSEXP, SEXP Y_itSEXP, SEXP SvecSEXP, SEXP GvecSEXP, SEXP Q_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_it(alpha_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_it(Y_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Svec(SvecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_it(Q_itSEXP);
    rcpp_result_gen = Rcpp::wrap(pYit_NIDA(alpha_it, Y_it, Svec, Gvec, Q_it));
    return rcpp_result_gen;
END_RCPP
}
// J_incidence_cube
arma::cube J_incidence_cube(const arma::mat& Test_order, const arma::cube& Qs);
RcppExport SEXP _hmcdm_J_incidence_cube(SEXP Test_orderSEXP, SEXP QsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Qs(QsSEXP);
    rcpp_result_gen = Rcpp::wrap(J_incidence_cube(Test_order, Qs));
    return rcpp_result_gen;
END_RCPP
}
// G2vec_efficient
arma::vec G2vec_efficient(const arma::cube& ETA, const arma::cube& J_incidence, const arma::cube& alphas_i, int test_version_i, const arma::mat Test_order, unsigned int t);
RcppExport SEXP _hmcdm_G2vec_efficient(SEXP ETASEXP, SEXP J_incidenceSEXP, SEXP alphas_iSEXP, SEXP test_version_iSEXP, SEXP Test_orderSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type ETA(ETASEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type J_incidence(J_incidenceSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type alphas_i(alphas_iSEXP);
    Rcpp::traits::input_parameter< int >::type test_version_i(test_version_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(G2vec_efficient(ETA, J_incidence, alphas_i, test_version_i, Test_order, t));
    return rcpp_result_gen;
END_RCPP
}
// sim_RT
arma::cube sim_RT(const arma::cube& alphas, const arma::cube& RT_itempars, const arma::mat& Q_matrix, const arma::vec& taus, double phi, const arma::mat ETAs, int G_version, const arma::mat& Test_order, arma::vec Test_versions);
RcppExport SEXP _hmcdm_sim_RT(SEXP alphasSEXP, SEXP RT_itemparsSEXP, SEXP Q_matrixSEXP, SEXP tausSEXP, SEXP phiSEXP, SEXP ETAsSEXP, SEXP G_versionSEXP, SEXP Test_orderSEXP, SEXP Test_versionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type RT_itempars(RT_itemparsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_matrix(Q_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ETAs(ETAsSEXP);
    Rcpp::traits::input_parameter< int >::type G_version(G_versionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Test_order(Test_orderSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Test_versions(Test_versionsSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_RT(alphas, RT_itempars, Q_matrix, taus, phi, ETAs, G_version, Test_order, Test_versions));
    return rcpp_result_gen;
END_RCPP
}
// dLit
double dLit(const arma::vec& G_it, const arma::vec& L_it, const arma::mat& RT_itempars_it, double tau_i, double phi);
RcppExport SEXP _hmcdm_dLit(SEXP G_itSEXP, SEXP L_itSEXP, SEXP RT_itempars_itSEXP, SEXP tau_iSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type G_it(G_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type L_it(L_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type RT_itempars_it(RT_itempars_itSEXP);
    Rcpp::traits::input_parameter< double >::type tau_i(tau_iSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(dLit(G_it, L_it, RT_itempars_it, tau_i, phi));
    return rcpp_result_gen;
END_RCPP
}
// simulate_alphas_HO_sep
arma::cube simulate_alphas_HO_sep(const arma::vec& lambdas, const arma::vec& thetas, const arma::mat& alpha0s, const Rcpp::List& Q_examinee, const unsigned int T, const unsigned int Jt);
RcppExport SEXP _hmcdm_simulate_alphas_HO_sep(SEXP lambdasSEXP, SEXP thetasSEXP, SEXP alpha0sSEXP, SEXP Q_examineeSEXP, SEXP TSEXP, SEXP JtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha0s(alpha0sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_alphas_HO_sep(lambdas, thetas, alpha0s, Q_examinee, T, Jt));
    return rcpp_result_gen;
END_RCPP
}
// pTran_HO_sep
double pTran_HO_sep(const arma::vec& alpha_prev, const arma::vec& alpha_post, const arma::vec& lambdas, double theta_i, const arma::mat& Q_i, unsigned int Jt, unsigned int t);
RcppExport SEXP _hmcdm_pTran_HO_sep(SEXP alpha_prevSEXP, SEXP alpha_postSEXP, SEXP lambdasSEXP, SEXP theta_iSEXP, SEXP Q_iSEXP, SEXP JtSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_prev(alpha_prevSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_post(alpha_postSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type theta_i(theta_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_i(Q_iSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(pTran_HO_sep(alpha_prev, alpha_post, lambdas, theta_i, Q_i, Jt, t));
    return rcpp_result_gen;
END_RCPP
}
// simulate_alphas_HO_joint
arma::cube simulate_alphas_HO_joint(const arma::vec& lambdas, const arma::vec& thetas, const arma::mat& alpha0s, const Rcpp::List& Q_examinee, const unsigned int T, const unsigned int Jt);
RcppExport SEXP _hmcdm_simulate_alphas_HO_joint(SEXP lambdasSEXP, SEXP thetasSEXP, SEXP alpha0sSEXP, SEXP Q_examineeSEXP, SEXP TSEXP, SEXP JtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha0s(alpha0sSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Q_examinee(Q_examineeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type Jt(JtSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_alphas_HO_joint(lambdas, thetas, alpha0s, Q_examinee, T, Jt));
    return rcpp_result_gen;
END_RCPP
}
// pTran_HO_joint
double pTran_HO_joint(const arma::vec& alpha_prev, const arma::vec& alpha_post, const arma::vec& lambdas, double theta_i, const arma::mat& Q_i, unsigned int Jt, unsigned int t);
RcppExport SEXP _hmcdm_pTran_HO_joint(SEXP alpha_prevSEXP, SEXP alpha_postSEXP, SEXP lambdasSEXP, SEXP theta_iSEXP, SEXP Q_iSEXP, SEXP JtSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_prev(alpha_prevSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_post(alpha_postSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type theta_i(theta_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q_i(Q_iSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Jt(JtSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(pTran_HO_joint(alpha_prev, alpha_post, lambdas, theta_i, Q_i, Jt, t));
    return rcpp_result_gen;
END_RCPP
}
// simulate_alphas_indept
arma::cube simulate_alphas_indept(const arma::vec taus, const arma::mat& alpha0s, const unsigned int T, const arma::mat& R);
RcppExport SEXP _hmcdm_simulate_alphas_indept(SEXP tausSEXP, SEXP alpha0sSEXP, SEXP TSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha0s(alpha0sSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_alphas_indept(taus, alpha0s, T, R));
    return rcpp_result_gen;
END_RCPP
}
// pTran_indept
double pTran_indept(const arma::vec& alpha_prev, const arma::vec& alpha_post, const arma::vec& taus, const arma::mat& R);
RcppExport SEXP _hmcdm_pTran_indept(SEXP alpha_prevSEXP, SEXP alpha_postSEXP, SEXP tausSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_prev(alpha_prevSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha_post(alpha_postSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type taus(tausSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(pTran_indept(alpha_prev, alpha_post, taus, R));
    return rcpp_result_gen;
END_RCPP
}
// simulate_alphas_FOHM
arma::cube simulate_alphas_FOHM(const arma::mat& Omega, const arma::mat& alpha0s, unsigned int T);
RcppExport SEXP _hmcdm_simulate_alphas_FOHM(SEXP OmegaSEXP, SEXP alpha0sSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha0s(alpha0sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_alphas_FOHM(Omega, alpha0s, T));
    return rcpp_result_gen;
END_RCPP
}
// rAlpha
arma::mat rAlpha(const arma::mat& Omega, unsigned int N, unsigned int T, const arma::vec& alpha1);
RcppExport SEXP _hmcdm_rAlpha(SEXP OmegaSEXP, SEXP NSEXP, SEXP TSEXP, SEXP alpha1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha1(alpha1SEXP);
    rcpp_result_gen = Rcpp::wrap(rAlpha(Omega, N, T, alpha1));
    return rcpp_result_gen;
END_RCPP
}
// rOmega
arma::mat rOmega(const arma::mat& TP);
RcppExport SEXP _hmcdm_rOmega(SEXP TPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type TP(TPSEXP);
    rcpp_result_gen = Rcpp::wrap(rOmega(TP));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hmcdm_bijectionvector", (DL_FUNC) &_hmcdm_bijectionvector, 1},
    {"_hmcdm_inv_bijectionvector", (DL_FUNC) &_hmcdm_inv_bijectionvector, 2},
    {"_hmcdm_rwishart", (DL_FUNC) &_hmcdm_rwishart, 2},
    {"_hmcdm_rinvwish", (DL_FUNC) &_hmcdm_rinvwish, 2},
    {"_hmcdm_rmultinomial", (DL_FUNC) &_hmcdm_rmultinomial, 1},
    {"_hmcdm_rDirichlet", (DL_FUNC) &_hmcdm_rDirichlet, 1},
    {"_hmcdm_dmvnrm", (DL_FUNC) &_hmcdm_dmvnrm, 4},
    {"_hmcdm_rmvnrm", (DL_FUNC) &_hmcdm_rmvnrm, 2},
    {"_hmcdm_random_Q", (DL_FUNC) &_hmcdm_random_Q, 2},
    {"_hmcdm_ETAmat", (DL_FUNC) &_hmcdm_ETAmat, 3},
    {"_hmcdm_TPmat", (DL_FUNC) &_hmcdm_TPmat, 1},
    {"_hmcdm_crosstab", (DL_FUNC) &_hmcdm_crosstab, 5},
    {"_hmcdm_resp_miss", (DL_FUNC) &_hmcdm_resp_miss, 3},
    {"_hmcdm_OddsRatio", (DL_FUNC) &_hmcdm_OddsRatio, 3},
    {"_hmcdm_getMode", (DL_FUNC) &_hmcdm_getMode, 2},
    {"_hmcdm_Sparse2Dense", (DL_FUNC) &_hmcdm_Sparse2Dense, 3},
    {"_hmcdm_Dense2Sparse", (DL_FUNC) &_hmcdm_Dense2Sparse, 3},
    {"_hmcdm_Mat2Array", (DL_FUNC) &_hmcdm_Mat2Array, 2},
    {"_hmcdm_Array2Mat", (DL_FUNC) &_hmcdm_Array2Mat, 1},
    {"_hmcdm_Q_list", (DL_FUNC) &_hmcdm_Q_list, 3},
    {"_hmcdm_point_estimates_learning", (DL_FUNC) &_hmcdm_point_estimates_learning, 7},
    {"_hmcdm_Learning_fit", (DL_FUNC) &_hmcdm_Learning_fit, 10},
    {"_hmcdm_parm_update_HO", (DL_FUNC) &_hmcdm_parm_update_HO, 16},
    {"_hmcdm_Gibbs_DINA_HO", (DL_FUNC) &_hmcdm_Gibbs_DINA_HO, 8},
    {"_hmcdm_parm_update_HO_RT_sep", (DL_FUNC) &_hmcdm_parm_update_HO_RT_sep, 26},
    {"_hmcdm_Gibbs_DINA_HO_RT_sep", (DL_FUNC) &_hmcdm_Gibbs_DINA_HO_RT_sep, 10},
    {"_hmcdm_parm_update_HO_RT_joint", (DL_FUNC) &_hmcdm_parm_update_HO_RT_joint, 26},
    {"_hmcdm_Gibbs_DINA_HO_RT_joint", (DL_FUNC) &_hmcdm_Gibbs_DINA_HO_RT_joint, 10},
    {"_hmcdm_parm_update_rRUM", (DL_FUNC) &_hmcdm_parm_update_rRUM, 18},
    {"_hmcdm_Gibbs_rRUM_indept", (DL_FUNC) &_hmcdm_Gibbs_rRUM_indept, 7},
    {"_hmcdm_parm_update_NIDA_indept", (DL_FUNC) &_hmcdm_parm_update_NIDA_indept, 16},
    {"_hmcdm_Gibbs_NIDA_indept", (DL_FUNC) &_hmcdm_Gibbs_NIDA_indept, 7},
    {"_hmcdm_parm_update_DINA_FOHM", (DL_FUNC) &_hmcdm_parm_update_DINA_FOHM, 13},
    {"_hmcdm_Gibbs_DINA_FOHM", (DL_FUNC) &_hmcdm_Gibbs_DINA_FOHM, 6},
    {"_hmcdm_hmcdm", (DL_FUNC) &_hmcdm_hmcdm, 12},
    {"_hmcdm_sim_resp_DINA", (DL_FUNC) &_hmcdm_sim_resp_DINA, 6},
    {"_hmcdm_simDINA", (DL_FUNC) &_hmcdm_simDINA, 5},
    {"_hmcdm_pYit_DINA", (DL_FUNC) &_hmcdm_pYit_DINA, 3},
    {"_hmcdm_sim_resp_rRUM", (DL_FUNC) &_hmcdm_sim_resp_rRUM, 6},
    {"_hmcdm_simrRUM", (DL_FUNC) &_hmcdm_simrRUM, 6},
    {"_hmcdm_pYit_rRUM", (DL_FUNC) &_hmcdm_pYit_rRUM, 5},
    {"_hmcdm_sim_resp_NIDA", (DL_FUNC) &_hmcdm_sim_resp_NIDA, 6},
    {"_hmcdm_simNIDA", (DL_FUNC) &_hmcdm_simNIDA, 6},
    {"_hmcdm_pYit_NIDA", (DL_FUNC) &_hmcdm_pYit_NIDA, 5},
    {"_hmcdm_J_incidence_cube", (DL_FUNC) &_hmcdm_J_incidence_cube, 2},
    {"_hmcdm_G2vec_efficient", (DL_FUNC) &_hmcdm_G2vec_efficient, 6},
    {"_hmcdm_sim_RT", (DL_FUNC) &_hmcdm_sim_RT, 9},
    {"_hmcdm_dLit", (DL_FUNC) &_hmcdm_dLit, 5},
    {"_hmcdm_simulate_alphas_HO_sep", (DL_FUNC) &_hmcdm_simulate_alphas_HO_sep, 6},
    {"_hmcdm_pTran_HO_sep", (DL_FUNC) &_hmcdm_pTran_HO_sep, 7},
    {"_hmcdm_simulate_alphas_HO_joint", (DL_FUNC) &_hmcdm_simulate_alphas_HO_joint, 6},
    {"_hmcdm_pTran_HO_joint", (DL_FUNC) &_hmcdm_pTran_HO_joint, 7},
    {"_hmcdm_simulate_alphas_indept", (DL_FUNC) &_hmcdm_simulate_alphas_indept, 4},
    {"_hmcdm_pTran_indept", (DL_FUNC) &_hmcdm_pTran_indept, 4},
    {"_hmcdm_simulate_alphas_FOHM", (DL_FUNC) &_hmcdm_simulate_alphas_FOHM, 3},
    {"_hmcdm_rAlpha", (DL_FUNC) &_hmcdm_rAlpha, 4},
    {"_hmcdm_rOmega", (DL_FUNC) &_hmcdm_rOmega, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hmcdm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
